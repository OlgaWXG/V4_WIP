import requests
import json
import time
import asyncio
import aiohttp
from get_token import get_access_token  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

# URN –º–æ–¥–µ–ª–∏ (–±–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
URN = "dXJuOmFkc2sud2lwcHJvZDpmcy5maWxlOnZmLmgtdXVCel9oVDVlWWZ6OGtxQkZhSXc_dmVyc2lvbj0xMQ"

# === –ü–æ–ª—É—á–µ–Ω–∏–µ GUID'–æ–≤ –º–æ–¥–µ–ª–∏ ===
def get_metadata(access_token, urn):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ GUID'–æ–≤ –≤ –º–æ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ JSON."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata"
    headers = {"Authorization": f"Bearer {access_token}"}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        metadata_list = data.get("data", {}).get("metadata", [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–π GUID —Å name == "BLD"
        selected_guid = next((item["guid"] for item in metadata_list if item.get("name") == "BLD"), None)
        
        if not selected_guid:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GUID —Å –∏–º–µ–Ω–µ–º 'BLD'")
            return []
        
        with open("guidsST.json", "w", encoding="utf-8") as f:
            json.dump(metadata_list, f, indent=4, ensure_ascii=False)

        print("‚úÖ GUID'—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'guidsST.json'")
        return [selected_guid]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π GUID
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}, {response.text}")
        return []

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
semaphore = asyncio.Semaphore(5)

async def get_view_metadata(session, access_token, urn, guid):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ GUID (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) —Å —Ä–µ—Ç—Ä–∞—è–º–∏."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata/{guid}"
    headers = {"Authorization": f"Bearer {access_token}"}
    
    retries = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429
    delay = 5    # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    async with semaphore:
        while retries > 0:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 202:
                    print(f"‚è≥ –î–∞–Ω–Ω—ã–µ –¥–ª—è {guid} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è, –∂–¥—ë–º 10 —Å–µ–∫...")
                    await asyncio.sleep(10)
                elif response.status == 429:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {guid}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    await asyncio.sleep(delay)
                    delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (5 ‚Üí 10 ‚Üí 20 —Å–µ–∫)
                    retries -= 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {guid}: {await response.text()}")
                    return None
        print(f"üö´ –î–∞–Ω–Ω—ã–µ –¥–ª—è {guid} –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
        return None
    
async def fetch_all_metadata(access_token, urn, guids):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è GUID 'BLD'."""
    all_metadata = {}
    
    async with aiohttp.ClientSession() as session:
        tasks = [get_view_metadata(session, access_token, urn, guid) for guid in guids]
        results = await asyncio.gather(*tasks)

        for guid, metadata in zip(guids, results):
            if metadata:
                all_metadata[guid] = metadata

    return all_metadata

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ ===
def extract_parameters(metadata):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ JSON."""
    parameters = {}

    for guid, data in metadata.items():
        objects = data.get("data", {}).get("objects", [])
        
        for obj in objects:
            object_id = obj.get("objectid")
            obj_properties = {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            if "properties" in obj:
                print(f"üîç –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}: {json.dumps(obj['properties'], indent=2, ensure_ascii=False)}")
                for category, props in obj["properties"].items():
                    if isinstance(props, dict):
                        for key, value in props.items():
                            obj_properties[key] = value

            if obj_properties:
                parameters[object_id] = obj_properties

    if parameters:
        with open("parameters.json", "w", encoding="utf-8") as f:
            json.dump(parameters, f, indent=4, ensure_ascii=False)
        print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'parameters.json'")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–±—ä–µ–∫—Ç–∞—Ö!")

async def get_object_properties(session, access_token, urn, guid):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ (properties) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ GUID."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata/{guid}/properties"
    headers = {"Authorization": f"Bearer {access_token}"}
    
    retries = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429
    delay = 5    # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    async with semaphore:
        while retries > 0:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    return await response.json()
                elif response.status == 202:
                    print(f"‚è≥ –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è {guid} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è, –∂–¥—ë–º 10 —Å–µ–∫...")
                    await asyncio.sleep(10)
                elif response.status == 429:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {guid}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    await asyncio.sleep(delay)
                    delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (5 ‚Üí 10 ‚Üí 20 —Å–µ–∫)
                    retries -= 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {guid}: {await response.text()}")
                    return None
        print(f"üö´ –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è {guid} –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
        return None


async def fetch_properties(access_token, urn, guids):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤."""
    all_properties = {}
    
    async with aiohttp.ClientSession() as session:
        tasks = [get_object_properties(session, access_token, urn, guid) for guid in guids]
        results = await asyncio.gather(*tasks)

        for guid, properties in zip(guids, results):
            if properties:
                all_properties[guid] = properties

    return all_properties


def main():
    print("üîç –ü–æ–ª—É—á–∞–µ–º access_token...")
    access_token = get_access_token()
    
    if not access_token:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token!")
        return

    print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω! –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GUID'—ã...")
    metadata_list = get_metadata(access_token, URN)
    
    if not metadata_list:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GUID!")
        return

    print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(metadata_list)} GUID'–æ–≤: {metadata_list}")
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")

    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        all_metadata = loop.run_until_complete(fetch_all_metadata(access_token, URN, metadata_list))
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(all_metadata)} GUID'–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    with open("metadata3.json", "w", encoding="utf-8") as f:
        json.dump(all_metadata, f, indent=4, ensure_ascii=False)

    print("üéâ –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'metadata3.json'")

    # üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ (properties)
    print("üõ† –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤...")

    try:
        object_properties = loop.run_until_complete(fetch_properties(access_token, URN, metadata_list))
        print(f"‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {len(object_properties)} GUID'–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    if object_properties:
        with open("properties.json", "w", encoding="utf-8") as f:
            json.dump(object_properties, f, indent=4, ensure_ascii=False)
        print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'properties.json'")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")

if __name__ == "__main__":
    main()
