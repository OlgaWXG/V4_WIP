import requests
import time

ACCESS_TOKEN = "eyJhbGciOiJSUzI1NiIsImtpZCI6IlhrUFpfSmhoXzlTYzNZS01oRERBZFBWeFowOF9SUzI1NiIsInBpLmF0bSI6ImFzc2MifQ.eyJzY29wZSI6WyJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiZGF0YTpjcmVhdGUiLCJidWNrZXQ6cmVhZCIsImJ1Y2tldDpjcmVhdGUiXSwiY2xpZW50X2lkIjoiR3JpNUFkME9hYkJlellYNVNld1kwSU9kMEtjQnVkNlEiLCJpc3MiOiJodHRwczovL2RldmVsb3Blci5hcGkuYXV0b2Rlc2suY29tIiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20iLCJqdGkiOiJMNUdOYVRVbWg0cTBpbm1hQmhSMXppZ3dIYlFqRFdTWTZ0dHVJaEdCUUo3U0ZDMzVOTEE4SlRDcFhPelRDSkpmIiwiZXhwIjoxNzQwNTY2NDUyfQ.WAEgzfezDSyFdDcWdO0y-5vvW5x-nnv9qLXaXrtAOWjslz9xTwAaNrRA_QHyN32sa_MnCL2CIe5rHT8mZL1XeaMg5pNLDzfrzKztOPtM2IxXg2G1tHoLzAzVcrDIqrywqNBQQyVBuY-urCPKEF1c0JKSfk6EX9h5Cc1w07GdCZoy10v45bRWCAU5qf4burEA4UYm-atS1C8RqCTpipiAjVVT_Gdei61IXFTFl0RsfmyxqLEEEaXgO06Z9F30qMW-YYzDRtNcleiVa7i1KsCJK-hZ-E3klM1MMXhp2-YBh_X1XBK_mgsZ6dgzsfUYczove77fw3Chr2fCAhOZOk2eXA"  # –û–±–Ω–æ–≤–∏ —Ç–æ–∫–µ–Ω!
URN = "dXJuOmFkc2sud2lwcHJvZDpmcy5maWxlOnZmLmZEeHZLWW12UkVPeE1HRllVazZWYVE_dmVyc2lvbj04"


def check_translation_status(access_token, urn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏ –≤ SVF –∏ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/manifest"
    headers = {"Authorization": f"Bearer {access_token}"}

    while True:
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            status = response.json()
            print(f"üîπ –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞: {status['status']}")

            if status['status'] == "success":
                print("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–æ–¥–µ–ª—å.")
                return True  # –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!
            elif status['status'] in ["failed", "timeout"]:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {status['status']}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}, {response.text}")
            return False

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        time.sleep(30)  # –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

def get_project_base_point(access_token, urn):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Project Base Point –∏–∑ –º–æ–¥–µ–ª–∏ Revit –≤ BIM 360."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata"
    headers = {"Authorization": f"Bearer {access_token}"}

    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {response.status_code}, {response.text}")
        return None

    metadata = response.json()
    metadata_guid = None

    # –ò—â–µ–º –Ω—É–∂–Ω—ã–π Metadata GUID
    for item in metadata.get("data", {}).get("metadata", []):
        if "Revit" in item.get("name", ""):  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ Revit
            metadata_guid = item["guid"]
            break

    if not metadata_guid:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è Revit-–º–æ–¥–µ–ª–∏.")
        return None

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏
    url_properties = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata/{metadata_guid}/properties"
    response = requests.get(url_properties, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–π—Å—Ç–≤: {response.status_code}, {response.text}")
        return None

    properties = response.json()

    # –ò—â–µ–º –æ–±—ä–µ–∫—Ç "Project Base Point"
    for object_data in properties.get("data", {}).get("collection", []):
        name = object_data.get("name", "")
        if "Project Base Point" in name:
            pbp_properties = object_data.get("properties", {})

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
            pbp_coordinates = {
                "X": pbp_properties.get("Identity Data", {}).get("North/South", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
                "Y": pbp_properties.get("Identity Data", {}).get("East/West", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
                "Z": pbp_properties.get("Identity Data", {}).get("Elevation", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
                "Angle to True North": pbp_properties.get("Identity Data", {}).get("Angle to True North", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"),
            }

            print(f"üìç Project Base Point –Ω–∞–π–¥–µ–Ω: {pbp_coordinates}")
            return pbp_coordinates

    print("‚ùå Project Base Point –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –º–æ–¥–µ–ª–∏.")
    return None

# üîπ –ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê
if check_translation_status(ACCESS_TOKEN, URN):
    print("üéâ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ SVF!")
    
    # üîπ –ü–æ–ª—É—á–∞–µ–º Project Base Point
    pbp_data = get_project_base_point(ACCESS_TOKEN, URN)
    
    if pbp_data:
        print(f"‚úÖ Project Base Point: {pbp_data}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Project Base Point.")
else:
    print("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è.")