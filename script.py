import requests
import json



# Forge API credentials
CLIENT_ID = 'Gri5Ad0OabBezYX5SewY0IOd0KcBud6Q' 
CLIENT_SECRET = 'A1AmIXtimA0l78zs' 
AUTH_ENDPOINT = 'https://developer.api.autodesk.com/authentication/v2/token'
PROJECTS_ENDPOINT = 'https://developer.api.autodesk.com/project/v1/hubs'

def get_access_token():
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è access token –¥–ª—è Forge API."""
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    payload = {
        'grant_type': 'client_credentials',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': 'data:read'  # –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
    
    try:
        response = requests.post(AUTH_ENDPOINT, headers=headers, data=payload)
        response.raise_for_status()  # Raise an exception for 4xx/5xx responses
        return response.json().get('access_token')
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Forge API: {str(e)}")
        return None

def get_project(access_token, project_name):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏."""
    headers = {'Authorization': f'Bearer {access_token}', 'Content-Type': 'application/json'}
    response = requests.get(PROJECTS_ENDPOINT, headers=headers)
    
    if response.status_code == 200:
        hubs = response.json().get('data', [])
        for hub in hubs:
            hub_id = hub['id']
            projects_url = f"https://developer.api.autodesk.com/project/v1/hubs/{hub_id}/projects"
            projects_response = requests.get(projects_url, headers=headers)
            if projects_response.status_code == 200:
                projects = projects_response.json().get('data', [])
                for project in projects:
                    if project['attributes']['name'] == project_name:
                        return hub_id, project
    print(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None, None

def get_top_folders(access_token, hub_id, project_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞."""
    url = f"https://developer.api.autodesk.com/project/v1/hubs/{hub_id}/projects/{project_id}/topFolders"
    headers = {'Authorization': f'Bearer {access_token}', 'Content-Type': 'application/json'}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get('data', [])
    else:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫: {response.status_code}, {response.text}")
        return None

def get_subfolders(access_token, project_id, folder_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏."""
    headers = {'Authorization': f'Bearer {access_token}', 'Content-Type': 'application/json'}
    subfolders_url = f"https://developer.api.autodesk.com/data/v1/projects/{project_id}/folders/{folder_id}/contents"

    response = requests.get(subfolders_url, headers=headers)
    if response.status_code == 200:
        return response.json().get('data', [])
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: {response.status_code}, {response.text}")
        return None

def save_to_json(data, filename="project_data.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def get_all_files(access_token, project_id, folders):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫, –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã.
    folders ‚Äì —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–ø–∫–∞—Ö.
    """
    all_files = []
    for folder in folders:
        folder_id = folder['id']
        folder_name = folder['attributes'].get('displayName')
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {folder_name} (ID: {folder_id})")
        contents = get_subfolders(access_token, project_id, folder_id)
        if contents:
            for item in contents:
                item_name = item['attributes'].get('displayName')
                item_type = item['type']  # –æ–±—ã—á–Ω–æ 'folders' –∏–ª–∏ 'items'
                print(f"  - {item_name} (–¢–∏–ø: {item_type}, ID: {item['id']})")
                # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - –ø–∞–ø–∫–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
                if item_type == 'folders':
                    sub_contents = get_all_files(access_token, project_id, [item])
                    all_files.extend(sub_contents)
                else:
                    all_files.append(item)
    return all_files

if __name__ == "__main__":
    access_token = get_access_token()
    project_name = "CONNECT (R23)"  # –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞

    if access_token:
        hub_id, project = get_project(access_token, project_name)
        if project:
            project_id = project['id']
            save_to_json(project, "project_info.json")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –ø–∞–ø–∫–∏
            top_folders = get_top_folders(access_token, hub_id, project_id)
            if top_folders:
                # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫
                save_to_json(top_folders, "top_folders.json")
                # –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø–æ–ª—É—á–∏–º —Ñ–∞–π–ª—ã
                print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫:")
                all_files = get_all_files(access_token, project_id, top_folders)
                if all_files:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
                    for file in all_files:
                        print(f"- {file['attributes'].get('displayName')} (ID: {file['id']})")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ JSON
                    save_to_json(all_files, "all_files.json")
                else:
                    print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token.")
