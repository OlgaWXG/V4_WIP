import requests
import json
import time
import asyncio
import aiohttp
from get_token import get_access_token  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

# URN –º–æ–¥–µ–ª–∏ (–±–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
URN = "dXJuOmFkc2sud2lwcHJvZDpmcy5maWxlOnZmLmgtdXVCel9oVDVlWWZ6OGtxQkZhSXc_dmVyc2lvbj0x"

# === –ü–æ–ª—É—á–µ–Ω–∏–µ GUID'–æ–≤ –º–æ–¥–µ–ª–∏ ===
def get_metadata(access_token, urn):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ GUID'–æ–≤ –≤ –º–æ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ JSON."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata"
    headers = {"Authorization": f"Bearer {access_token}"}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        metadata_list = data.get("data", {}).get("metadata", [])

        with open("guidsST.json", "w", encoding="utf-8") as f:
            json.dump(metadata_list, f, indent=4, ensure_ascii=False)

        print("‚úÖ GUID'—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'guidsST.json'")
        return metadata_list
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}, {response.text}")
        return []

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ===
async def get_view_metadata(session, access_token, urn, guid):
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ GUID (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    url = f"https://developer.api.autodesk.com/modelderivative/v2/designdata/{urn}/metadata/{guid}"
    headers = {"Authorization": f"Bearer {access_token}"}

    while True:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                return await response.json()
            elif response.status == 202:
                print(f"‚è≥ –î–∞–Ω–Ω—ã–µ –¥–ª—è {guid} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è, –∂–¥—ë–º 10 —Å–µ–∫...")
                await asyncio.sleep(10)
            elif response.status == 413:
                print(f"‚ùå –û—à–∏–±–∫–∞ 413: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {guid}.")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {guid}")
                return None

async def fetch_all_metadata(access_token, urn, guids):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö GUID'–æ–≤."""
    all_metadata = {}
    
    async with aiohttp.ClientSession() as session:
        tasks = [get_view_metadata(session, access_token, urn, guid["guid"]) for guid in guids]
        results = await asyncio.gather(*tasks)

        for guid, metadata in zip(guids, results):
            if metadata:
                all_metadata[guid["guid"]] = metadata

    return all_metadata

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö Properties ===
def save_all_properties(metadata):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ (Properties) –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON."""
    all_properties = {}

    for guid, data in metadata.items():
        objects = data.get("data", {}).get("objects", [])

        for obj in objects:
            properties = obj.get("properties", {})
            if properties:
                all_properties[obj["objectid"]] = properties

    if all_properties:
        with open("properties.json", "w", encoding="utf-8") as f:
            json.dump(all_properties, f, indent=4, ensure_ascii=False)

        print("\n‚úÖ –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ (Properties) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'properties.json'")
    else:
        print("\n‚ùå –°–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

# === –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Area, Volume, Length, Perimeter, Thickness ===
def find_dimensions(metadata):
    """–ò—â–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π Floor, Wall, Structural Framing."""
    categories = {
        "FLOOR": ["Perimeter", "Area", "Volume", "Thickness"],
        "WALL": ["Length", "Area", "Volume"],
        "Structural Framing": ["Length", "Volume"]
    }
    
    found_dimensions = []

    for guid, data in metadata.items():
        objects = data.get("data", {}).get("objects", [])

        for obj in objects:
            properties = obj.get("properties", {})

            for category, keywords in categories.items():
                category_properties = properties.get(category, {})
                for key, value in category_properties.items():
                    if any(keyword.lower() in key.lower() for keyword in keywords):
                        found_dimensions.append({
                            "category": category,
                            "property": key,
                            "value": value
                        })

    if found_dimensions:
        with open("dimensions.json", "w", encoding="utf-8") as f:
            json.dump(found_dimensions, f, indent=4, ensure_ascii=False)

        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'dimensions.json'")
    else:
        print("\n‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'Site' ===
def save_site_category(metadata):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é 'Site' –∏ –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª."""
    site_data = {}

    for guid, data in metadata.items():
        objects = data.get("data", {}).get("objects", [])

        for obj in objects:
            properties = obj.get("properties", {})
            site_properties = properties.get("Site", {})

            if site_properties:
                site_data[obj["objectid"]] = site_properties

    if site_data:
        with open("Site.json", "w", encoding="utf-8") as f:
            json.dump(site_data, f, indent=4, ensure_ascii=False)

        print("\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Site' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'Site.json'")
    else:
        print("\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è 'Site' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# === –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
def main():
    access_token = get_access_token()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ get_token.py
    urn = URN

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ GUID'–æ–≤
    metadata_list = get_metadata(access_token, urn)
    if not metadata_list:
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    print("üîç –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö GUID'–æ–≤...")
    all_metadata = asyncio.run(fetch_all_metadata(access_token, urn, metadata_list))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open("metadata.json", "w", encoding="utf-8") as f:
        json.dump(all_metadata, f, indent=4, ensure_ascii=False)

    print("üéâ –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'metadata.json'")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö Properties
    save_all_properties(all_metadata)

    # –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
    find_dimensions(all_metadata)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Site
    save_site_category(all_metadata)

if __name__ == "__main__":
    main()
