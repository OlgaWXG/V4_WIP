import requests
import base64
import json




CLIENT_ID = 'Gri5Ad0OabBezYX5SewY0IOd0KcBud6Q' 
CLIENT_SECRET = 'A1AmIXtimA0l78zs'

AUTH_ENDPOINT = "https://developer.api.autodesk.com/authentication/v2/token"

def get_access_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è Forge API —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏."""
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    payload = {
        "grant_type": "client_credentials",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": "data:read data:write data:create bucket:create bucket:read bucket:update data:search"
    }
    
    try:
        response = requests.post(AUTH_ENDPOINT, headers=headers, data=payload)
        response.raise_for_status()
        
        token_data = response.json()
        access_token = token_data.get("access_token")
        expires_in = token_data.get("expires_in")
        
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
        print("üîπ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:", expires_in, "—Å–µ–∫—É–Ω–¥")
        
        return access_token
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        return None


def decode_jwt(token):
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö."""
    try:
        payload_encoded = token.split('.')[1]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å (PAYLOAD)
        payload_decoded = base64.urlsafe_b64decode(payload_encoded + "==").decode("utf-8")  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
        
        payload_json = json.loads(payload_decoded)
        
        print("\nüîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞:")
        print(json.dumps(payload_json, indent=4, ensure_ascii=False))  # –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º JSON
        
        return payload_json
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        return None

# === –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ===
token = get_access_token()
if token:
    decode_jwt(token)
